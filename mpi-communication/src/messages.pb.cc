// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace messages {

namespace {

const ::google::protobuf::Descriptor* CommonFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_InputFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_InputFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Task_InputFile_PreProcessor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Task_InputFile_Scope_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Task_OutputFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_OutputFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Task_OutputFile_PostProcessor_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Task_Variable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_Variable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_Environment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_Environment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskResult_OutputFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskResult_OutputFile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  CommonFile_descriptor_ = file->message_type(0);
  static const int CommonFile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonFile, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonFile, chunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonFile, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonFile, data_),
  };
  CommonFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonFile_descriptor_,
      CommonFile::default_instance_,
      CommonFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonFile));
  Task_descriptor_ = file->message_type(1);
  static const int Task_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, env_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, inputfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, outputfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, initjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, completedjobid_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Task_InputFile_descriptor_ = Task_descriptor_->nested_type(0);
  static const int Task_InputFile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_InputFile, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_InputFile, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_InputFile, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_InputFile, preprocessor_),
  };
  Task_InputFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_InputFile_descriptor_,
      Task_InputFile::default_instance_,
      Task_InputFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_InputFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_InputFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task_InputFile));
  Task_InputFile_PreProcessor_descriptor_ = Task_InputFile_descriptor_->enum_type(0);
  Task_InputFile_Scope_descriptor_ = Task_InputFile_descriptor_->enum_type(1);
  Task_OutputFile_descriptor_ = Task_descriptor_->nested_type(1);
  static const int Task_OutputFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_OutputFile, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_OutputFile, postprocessor_),
  };
  Task_OutputFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_OutputFile_descriptor_,
      Task_OutputFile::default_instance_,
      Task_OutputFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_OutputFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_OutputFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task_OutputFile));
  Task_OutputFile_PostProcessor_descriptor_ = Task_OutputFile_descriptor_->enum_type(0);
  Task_Variable_descriptor_ = Task_descriptor_->nested_type(2);
  static const int Task_Variable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Variable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Variable, value_),
  };
  Task_Variable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_Variable_descriptor_,
      Task_Variable::default_instance_,
      Task_Variable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Variable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Variable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task_Variable));
  Task_Environment_descriptor_ = Task_descriptor_->nested_type(3);
  static const int Task_Environment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Environment, variable_),
  };
  Task_Environment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_Environment_descriptor_,
      Task_Environment::default_instance_,
      Task_Environment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Environment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Environment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task_Environment));
  Task_Command_descriptor_ = Task_descriptor_->nested_type(4);
  static const int Task_Command_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Command, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Command, argument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Command, timeout_),
  };
  Task_Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_Command_descriptor_,
      Task_Command::default_instance_,
      Task_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task_Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task_Command));
  TaskResult_descriptor_ = file->message_type(2);
  static const int TaskResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, exitcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, taskduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, commandduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, workingdatasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, outputfile_),
  };
  TaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskResult_descriptor_,
      TaskResult::default_instance_,
      TaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskResult));
  TaskResult_OutputFile_descriptor_ = TaskResult_descriptor_->nested_type(0);
  static const int TaskResult_OutputFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult_OutputFile, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult_OutputFile, data_),
  };
  TaskResult_OutputFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskResult_OutputFile_descriptor_,
      TaskResult_OutputFile::default_instance_,
      TaskResult_OutputFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult_OutputFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult_OutputFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskResult_OutputFile));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonFile_descriptor_, &CommonFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_InputFile_descriptor_, &Task_InputFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_OutputFile_descriptor_, &Task_OutputFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_Variable_descriptor_, &Task_Variable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_Environment_descriptor_, &Task_Environment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_Command_descriptor_, &Task_Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskResult_descriptor_, &TaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskResult_OutputFile_descriptor_, &TaskResult_OutputFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete CommonFile::default_instance_;
  delete CommonFile_reflection_;
  delete Task::default_instance_;
  delete Task_reflection_;
  delete Task_InputFile::default_instance_;
  delete Task_InputFile_reflection_;
  delete Task_OutputFile::default_instance_;
  delete Task_OutputFile_reflection_;
  delete Task_Variable::default_instance_;
  delete Task_Variable_reflection_;
  delete Task_Environment::default_instance_;
  delete Task_Environment_reflection_;
  delete Task_Command::default_instance_;
  delete Task_Command_reflection_;
  delete TaskResult::default_instance_;
  delete TaskResult_reflection_;
  delete TaskResult_OutputFile::default_instance_;
  delete TaskResult_OutputFile_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\010messages\"E\n\nCommonFile"
    "\022\014\n\004name\030\001 \002(\t\022\r\n\005chunk\030\002 \002(\005\022\014\n\004last\030\003 "
    "\002(\010\022\014\n\004data\030\004 \002(\014\"\254\006\n\004Task\022\r\n\005jobId\030\001 \002("
    "\005\022\r\n\005index\030\002 \002(\005\022\'\n\003env\030\003 \002(\0132\032.messages"
    ".Task.Environment\022\r\n\005cmdId\030\004 \002(\t\022\'\n\007comm"
    "and\030\005 \003(\0132\026.messages.Task.Command\022+\n\tinp"
    "utFile\030\006 \003(\0132\030.messages.Task.InputFile\022-"
    "\n\noutputFile\030\007 \003(\0132\031.messages.Task.Outpu"
    "tFile\022\017\n\007initJob\030\010 \002(\010\022\026\n\016completedJobId"
    "\030\t \003(\005\032\366\001\n\tInputFile\022\014\n\004name\030\001 \002(\t\022-\n\005sc"
    "ope\030\002 \002(\0162\036.messages.Task.InputFile.Scop"
    "e\022\014\n\004data\030\003 \001(\014\022;\n\014preProcessor\030\004 \002(\0162%."
    "messages.Task.InputFile.PreProcessor\"<\n\014"
    "PreProcessor\022\010\n\004NONE\020\001\022\021\n\rARCHIVE_UNZIP\020"
    "\002\022\017\n\013FILE_GUNZIP\020\003\"#\n\005Scope\022\007\n\003RUN\020\001\022\007\n\003"
    "JOB\020\002\022\010\n\004TASK\020\003\032\204\001\n\nOutputFile\022\014\n\004name\030\001"
    " \002(\t\022>\n\rpostProcessor\030\002 \002(\0162\'.messages.T"
    "ask.OutputFile.PostProcessor\"(\n\rPostProc"
    "essor\022\010\n\004NONE\020\001\022\r\n\tFILE_GZIP\020\002\032\'\n\010Variab"
    "le\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\0328\n\013Envir"
    "onment\022)\n\010variable\030\001 \003(\0132\027.messages.Task"
    ".Variable\032=\n\007Command\022\017\n\007program\030\001 \002(\t\022\020\n"
    "\010argument\030\002 \003(\t\022\017\n\007timeout\030\003 \001(\005\"\305\001\n\nTas"
    "kResult\022\020\n\010exitCode\030\001 \002(\005\022\024\n\014taskDuratio"
    "n\030\002 \002(\003\022\027\n\017commandDuration\030\003 \003(\003\022\027\n\017work"
    "ingDataSize\030\004 \002(\003\0223\n\noutputFile\030\005 \003(\0132\037."
    "messages.TaskResult.OutputFile\032(\n\nOutput"
    "File\022\014\n\004name\030\001 \002(\t\022\014\n\004data\030\002 \001(\014B6\n*eu.i"
    "tesla_project.computation.mpi.messagesB\010"
    "Messages", 1168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  CommonFile::default_instance_ = new CommonFile();
  Task::default_instance_ = new Task();
  Task_InputFile::default_instance_ = new Task_InputFile();
  Task_OutputFile::default_instance_ = new Task_OutputFile();
  Task_Variable::default_instance_ = new Task_Variable();
  Task_Environment::default_instance_ = new Task_Environment();
  Task_Command::default_instance_ = new Task_Command();
  TaskResult::default_instance_ = new TaskResult();
  TaskResult_OutputFile::default_instance_ = new TaskResult_OutputFile();
  CommonFile::default_instance_->InitAsDefaultInstance();
  Task::default_instance_->InitAsDefaultInstance();
  Task_InputFile::default_instance_->InitAsDefaultInstance();
  Task_OutputFile::default_instance_->InitAsDefaultInstance();
  Task_Variable::default_instance_->InitAsDefaultInstance();
  Task_Environment::default_instance_->InitAsDefaultInstance();
  Task_Command::default_instance_->InitAsDefaultInstance();
  TaskResult::default_instance_->InitAsDefaultInstance();
  TaskResult_OutputFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CommonFile::kNameFieldNumber;
const int CommonFile::kChunkFieldNumber;
const int CommonFile::kLastFieldNumber;
const int CommonFile::kDataFieldNumber;
#endif  // !_MSC_VER

CommonFile::CommonFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonFile::InitAsDefaultInstance() {
}

CommonFile::CommonFile(const CommonFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonFile::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chunk_ = 0;
  last_ = false;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonFile::~CommonFile() {
  SharedDtor();
}

void CommonFile::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CommonFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonFile_descriptor_;
}

const CommonFile& CommonFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

CommonFile* CommonFile::default_instance_ = NULL;

CommonFile* CommonFile::New() const {
  return new CommonFile;
}

void CommonFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    chunk_ = 0;
    last_ = false;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chunk;
        break;
      }

      // required int32 chunk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_)));
          set_has_chunk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last;
        break;
      }

      // required bool last = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 chunk = 2;
  if (has_chunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chunk(), output);
  }

  // required bool last = 3;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->last(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 chunk = 2;
  if (has_chunk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chunk(), target);
  }

  // required bool last = 3;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->last(), target);
  }

  // required bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 chunk = 2;
    if (has_chunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk());
    }

    // required bool last = 3;
    if (has_last()) {
      total_size += 1 + 1;
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonFile::MergeFrom(const CommonFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_chunk()) {
      set_chunk(from.chunk());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonFile::CopyFrom(const CommonFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CommonFile::Swap(CommonFile* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(chunk_, other->chunk_);
    std::swap(last_, other->last_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonFile_descriptor_;
  metadata.reflection = CommonFile_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Task_InputFile_PreProcessor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_InputFile_PreProcessor_descriptor_;
}
bool Task_InputFile_PreProcessor_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Task_InputFile_PreProcessor Task_InputFile::NONE;
const Task_InputFile_PreProcessor Task_InputFile::ARCHIVE_UNZIP;
const Task_InputFile_PreProcessor Task_InputFile::FILE_GUNZIP;
const Task_InputFile_PreProcessor Task_InputFile::PreProcessor_MIN;
const Task_InputFile_PreProcessor Task_InputFile::PreProcessor_MAX;
const int Task_InputFile::PreProcessor_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Task_InputFile_Scope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_InputFile_Scope_descriptor_;
}
bool Task_InputFile_Scope_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Task_InputFile_Scope Task_InputFile::RUN;
const Task_InputFile_Scope Task_InputFile::JOB;
const Task_InputFile_Scope Task_InputFile::TASK;
const Task_InputFile_Scope Task_InputFile::Scope_MIN;
const Task_InputFile_Scope Task_InputFile::Scope_MAX;
const int Task_InputFile::Scope_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Task_InputFile::kNameFieldNumber;
const int Task_InputFile::kScopeFieldNumber;
const int Task_InputFile::kDataFieldNumber;
const int Task_InputFile::kPreProcessorFieldNumber;
#endif  // !_MSC_VER

Task_InputFile::Task_InputFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task_InputFile::InitAsDefaultInstance() {
}

Task_InputFile::Task_InputFile(const Task_InputFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task_InputFile::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scope_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preprocessor_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task_InputFile::~Task_InputFile() {
  SharedDtor();
}

void Task_InputFile::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Task_InputFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task_InputFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_InputFile_descriptor_;
}

const Task_InputFile& Task_InputFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Task_InputFile* Task_InputFile::default_instance_ = NULL;

Task_InputFile* Task_InputFile::New() const {
  return new Task_InputFile;
}

void Task_InputFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    scope_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    preprocessor_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task_InputFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scope;
        break;
      }

      // required .messages.Task.InputFile.Scope scope = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::messages::Task_InputFile_Scope_IsValid(value)) {
            set_scope(static_cast< ::messages::Task_InputFile_Scope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_preProcessor;
        break;
      }

      // required .messages.Task.InputFile.PreProcessor preProcessor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preProcessor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::messages::Task_InputFile_PreProcessor_IsValid(value)) {
            set_preprocessor(static_cast< ::messages::Task_InputFile_PreProcessor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task_InputFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .messages.Task.InputFile.Scope scope = 2;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->scope(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // required .messages.Task.InputFile.PreProcessor preProcessor = 4;
  if (has_preprocessor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->preprocessor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task_InputFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .messages.Task.InputFile.Scope scope = 2;
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->scope(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // required .messages.Task.InputFile.PreProcessor preProcessor = 4;
  if (has_preprocessor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->preprocessor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task_InputFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .messages.Task.InputFile.Scope scope = 2;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scope());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required .messages.Task.InputFile.PreProcessor preProcessor = 4;
    if (has_preprocessor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preprocessor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task_InputFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task_InputFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task_InputFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task_InputFile::MergeFrom(const Task_InputFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_preprocessor()) {
      set_preprocessor(from.preprocessor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task_InputFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task_InputFile::CopyFrom(const Task_InputFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task_InputFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void Task_InputFile::Swap(Task_InputFile* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(scope_, other->scope_);
    std::swap(data_, other->data_);
    std::swap(preprocessor_, other->preprocessor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task_InputFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_InputFile_descriptor_;
  metadata.reflection = Task_InputFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Task_OutputFile_PostProcessor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_OutputFile_PostProcessor_descriptor_;
}
bool Task_OutputFile_PostProcessor_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Task_OutputFile_PostProcessor Task_OutputFile::NONE;
const Task_OutputFile_PostProcessor Task_OutputFile::FILE_GZIP;
const Task_OutputFile_PostProcessor Task_OutputFile::PostProcessor_MIN;
const Task_OutputFile_PostProcessor Task_OutputFile::PostProcessor_MAX;
const int Task_OutputFile::PostProcessor_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Task_OutputFile::kNameFieldNumber;
const int Task_OutputFile::kPostProcessorFieldNumber;
#endif  // !_MSC_VER

Task_OutputFile::Task_OutputFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task_OutputFile::InitAsDefaultInstance() {
}

Task_OutputFile::Task_OutputFile(const Task_OutputFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task_OutputFile::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postprocessor_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task_OutputFile::~Task_OutputFile() {
  SharedDtor();
}

void Task_OutputFile::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Task_OutputFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task_OutputFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_OutputFile_descriptor_;
}

const Task_OutputFile& Task_OutputFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Task_OutputFile* Task_OutputFile::default_instance_ = NULL;

Task_OutputFile* Task_OutputFile::New() const {
  return new Task_OutputFile;
}

void Task_OutputFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    postprocessor_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task_OutputFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_postProcessor;
        break;
      }

      // required .messages.Task.OutputFile.PostProcessor postProcessor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_postProcessor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::messages::Task_OutputFile_PostProcessor_IsValid(value)) {
            set_postprocessor(static_cast< ::messages::Task_OutputFile_PostProcessor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task_OutputFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .messages.Task.OutputFile.PostProcessor postProcessor = 2;
  if (has_postprocessor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->postprocessor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task_OutputFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .messages.Task.OutputFile.PostProcessor postProcessor = 2;
  if (has_postprocessor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->postprocessor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task_OutputFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .messages.Task.OutputFile.PostProcessor postProcessor = 2;
    if (has_postprocessor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->postprocessor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task_OutputFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task_OutputFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task_OutputFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task_OutputFile::MergeFrom(const Task_OutputFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_postprocessor()) {
      set_postprocessor(from.postprocessor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task_OutputFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task_OutputFile::CopyFrom(const Task_OutputFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task_OutputFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Task_OutputFile::Swap(Task_OutputFile* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(postprocessor_, other->postprocessor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task_OutputFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_OutputFile_descriptor_;
  metadata.reflection = Task_OutputFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Task_Variable::kNameFieldNumber;
const int Task_Variable::kValueFieldNumber;
#endif  // !_MSC_VER

Task_Variable::Task_Variable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task_Variable::InitAsDefaultInstance() {
}

Task_Variable::Task_Variable(const Task_Variable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task_Variable::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task_Variable::~Task_Variable() {
  SharedDtor();
}

void Task_Variable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Task_Variable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task_Variable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_Variable_descriptor_;
}

const Task_Variable& Task_Variable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Task_Variable* Task_Variable::default_instance_ = NULL;

Task_Variable* Task_Variable::New() const {
  return new Task_Variable;
}

void Task_Variable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task_Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task_Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task_Variable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task_Variable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task_Variable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task_Variable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task_Variable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task_Variable::MergeFrom(const Task_Variable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task_Variable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task_Variable::CopyFrom(const Task_Variable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task_Variable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Task_Variable::Swap(Task_Variable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task_Variable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_Variable_descriptor_;
  metadata.reflection = Task_Variable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Task_Environment::kVariableFieldNumber;
#endif  // !_MSC_VER

Task_Environment::Task_Environment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task_Environment::InitAsDefaultInstance() {
}

Task_Environment::Task_Environment(const Task_Environment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task_Environment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task_Environment::~Task_Environment() {
  SharedDtor();
}

void Task_Environment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Task_Environment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task_Environment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_Environment_descriptor_;
}

const Task_Environment& Task_Environment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Task_Environment* Task_Environment::default_instance_ = NULL;

Task_Environment* Task_Environment::New() const {
  return new Task_Environment;
}

void Task_Environment::Clear() {
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task_Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .messages.Task.Variable variable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_variable;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task_Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .messages.Task.Variable variable = 1;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variable(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task_Environment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .messages.Task.Variable variable = 1;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->variable(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task_Environment::ByteSize() const {
  int total_size = 0;

  // repeated .messages.Task.Variable variable = 1;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task_Environment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task_Environment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task_Environment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task_Environment::MergeFrom(const Task_Environment& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task_Environment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task_Environment::CopyFrom(const Task_Environment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task_Environment::IsInitialized() const {

  for (int i = 0; i < variable_size(); i++) {
    if (!this->variable(i).IsInitialized()) return false;
  }
  return true;
}

void Task_Environment::Swap(Task_Environment* other) {
  if (other != this) {
    variable_.Swap(&other->variable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task_Environment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_Environment_descriptor_;
  metadata.reflection = Task_Environment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Task_Command::kProgramFieldNumber;
const int Task_Command::kArgumentFieldNumber;
const int Task_Command::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Task_Command::Task_Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task_Command::InitAsDefaultInstance() {
}

Task_Command::Task_Command(const Task_Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task_Command::SharedCtor() {
  _cached_size_ = 0;
  program_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task_Command::~Task_Command() {
  SharedDtor();
}

void Task_Command::SharedDtor() {
  if (program_ != &::google::protobuf::internal::kEmptyString) {
    delete program_;
  }
  if (this != default_instance_) {
  }
}

void Task_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task_Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_Command_descriptor_;
}

const Task_Command& Task_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Task_Command* Task_Command::default_instance_ = NULL;

Task_Command* Task_Command::New() const {
  return new Task_Command;
}

void Task_Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_program()) {
      if (program_ != &::google::protobuf::internal::kEmptyString) {
        program_->clear();
      }
    }
    timeout_ = 0;
  }
  argument_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string program = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_program()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->program().data(), this->program().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argument;
        break;
      }

      // repeated string argument = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_argument()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argument(this->argument_size() - 1).data(),
            this->argument(this->argument_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argument;
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string program = 1;
  if (has_program()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->program().data(), this->program().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->program(), output);
  }

  // repeated string argument = 2;
  for (int i = 0; i < this->argument_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->argument(i).data(), this->argument(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->argument(i), output);
  }

  // optional int32 timeout = 3;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task_Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string program = 1;
  if (has_program()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->program().data(), this->program().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->program(), target);
  }

  // repeated string argument = 2;
  for (int i = 0; i < this->argument_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argument(i).data(), this->argument(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->argument(i), target);
  }

  // optional int32 timeout = 3;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task_Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string program = 1;
    if (has_program()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->program());
    }

    // optional int32 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

  }
  // repeated string argument = 2;
  total_size += 1 * this->argument_size();
  for (int i = 0; i < this->argument_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->argument(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task_Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task_Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task_Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task_Command::MergeFrom(const Task_Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  argument_.MergeFrom(from.argument_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task_Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task_Command::CopyFrom(const Task_Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Task_Command::Swap(Task_Command* other) {
  if (other != this) {
    std::swap(program_, other->program_);
    argument_.Swap(&other->argument_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task_Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_Command_descriptor_;
  metadata.reflection = Task_Command_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Task::kJobIdFieldNumber;
const int Task::kIndexFieldNumber;
const int Task::kEnvFieldNumber;
const int Task::kCmdIdFieldNumber;
const int Task::kCommandFieldNumber;
const int Task::kInputFileFieldNumber;
const int Task::kOutputFileFieldNumber;
const int Task::kInitJobFieldNumber;
const int Task::kCompletedJobIdFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
  env_ = const_cast< ::messages::Task_Environment*>(&::messages::Task_Environment::default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  jobid_ = 0;
  index_ = 0;
  env_ = NULL;
  cmdid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  initjob_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (cmdid_ != &::google::protobuf::internal::kEmptyString) {
    delete cmdid_;
  }
  if (this != default_instance_) {
    delete env_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jobid_ = 0;
    index_ = 0;
    if (has_env()) {
      if (env_ != NULL) env_->::messages::Task_Environment::Clear();
    }
    if (has_cmdid()) {
      if (cmdid_ != &::google::protobuf::internal::kEmptyString) {
        cmdid_->clear();
      }
    }
    initjob_ = false;
  }
  command_.Clear();
  inputfile_.Clear();
  outputfile_.Clear();
  completedjobid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 jobId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_env;
        break;
      }

      // required .messages.Task.Environment env = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_env:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cmdId;
        break;
      }

      // required string cmdId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmdId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmdid().data(), this->cmdid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_command;
        break;
      }

      // repeated .messages.Task.Command command = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_command;
        if (input->ExpectTag(50)) goto parse_inputFile;
        break;
      }

      // repeated .messages.Task.InputFile inputFile = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_inputFile;
        if (input->ExpectTag(58)) goto parse_outputFile;
        break;
      }

      // repeated .messages.Task.OutputFile outputFile = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_outputFile;
        if (input->ExpectTag(64)) goto parse_initJob;
        break;
      }

      // required bool initJob = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initJob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initjob_)));
          set_has_initjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_completedJobId;
        break;
      }

      // repeated int32 completedJobId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completedJobId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_completedjobid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_completedjobid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_completedJobId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 jobId = 1;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jobid(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required .messages.Task.Environment env = 3;
  if (has_env()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->env(), output);
  }

  // required string cmdId = 4;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmdid().data(), this->cmdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cmdid(), output);
  }

  // repeated .messages.Task.Command command = 5;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->command(i), output);
  }

  // repeated .messages.Task.InputFile inputFile = 6;
  for (int i = 0; i < this->inputfile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->inputfile(i), output);
  }

  // repeated .messages.Task.OutputFile outputFile = 7;
  for (int i = 0; i < this->outputfile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->outputfile(i), output);
  }

  // required bool initJob = 8;
  if (has_initjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->initjob(), output);
  }

  // repeated int32 completedJobId = 9;
  for (int i = 0; i < this->completedjobid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->completedjobid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 jobId = 1;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jobid(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required .messages.Task.Environment env = 3;
  if (has_env()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->env(), target);
  }

  // required string cmdId = 4;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmdid().data(), this->cmdid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cmdid(), target);
  }

  // repeated .messages.Task.Command command = 5;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->command(i), target);
  }

  // repeated .messages.Task.InputFile inputFile = 6;
  for (int i = 0; i < this->inputfile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->inputfile(i), target);
  }

  // repeated .messages.Task.OutputFile outputFile = 7;
  for (int i = 0; i < this->outputfile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->outputfile(i), target);
  }

  // required bool initJob = 8;
  if (has_initjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->initjob(), target);
  }

  // repeated int32 completedJobId = 9;
  for (int i = 0; i < this->completedjobid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->completedjobid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 jobId = 1;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jobid());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .messages.Task.Environment env = 3;
    if (has_env()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env());
    }

    // required string cmdId = 4;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmdid());
    }

    // required bool initJob = 8;
    if (has_initjob()) {
      total_size += 1 + 1;
    }

  }
  // repeated .messages.Task.Command command = 5;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->command(i));
  }

  // repeated .messages.Task.InputFile inputFile = 6;
  total_size += 1 * this->inputfile_size();
  for (int i = 0; i < this->inputfile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputfile(i));
  }

  // repeated .messages.Task.OutputFile outputFile = 7;
  total_size += 1 * this->outputfile_size();
  for (int i = 0; i < this->outputfile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputfile(i));
  }

  // repeated int32 completedJobId = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->completedjobid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->completedjobid(i));
    }
    total_size += 1 * this->completedjobid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  inputfile_.MergeFrom(from.inputfile_);
  outputfile_.MergeFrom(from.outputfile_);
  completedjobid_.MergeFrom(from.completedjobid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_env()) {
      mutable_env()->::messages::Task_Environment::MergeFrom(from.env());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_initjob()) {
      set_initjob(from.initjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000008f) != 0x0000008f) return false;

  if (has_env()) {
    if (!this->env().IsInitialized()) return false;
  }
  for (int i = 0; i < command_size(); i++) {
    if (!this->command(i).IsInitialized()) return false;
  }
  for (int i = 0; i < inputfile_size(); i++) {
    if (!this->inputfile(i).IsInitialized()) return false;
  }
  for (int i = 0; i < outputfile_size(); i++) {
    if (!this->outputfile(i).IsInitialized()) return false;
  }
  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(jobid_, other->jobid_);
    std::swap(index_, other->index_);
    std::swap(env_, other->env_);
    std::swap(cmdid_, other->cmdid_);
    command_.Swap(&other->command_);
    inputfile_.Swap(&other->inputfile_);
    outputfile_.Swap(&other->outputfile_);
    std::swap(initjob_, other->initjob_);
    completedjobid_.Swap(&other->completedjobid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskResult_OutputFile::kNameFieldNumber;
const int TaskResult_OutputFile::kDataFieldNumber;
#endif  // !_MSC_VER

TaskResult_OutputFile::TaskResult_OutputFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskResult_OutputFile::InitAsDefaultInstance() {
}

TaskResult_OutputFile::TaskResult_OutputFile(const TaskResult_OutputFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskResult_OutputFile::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskResult_OutputFile::~TaskResult_OutputFile() {
  SharedDtor();
}

void TaskResult_OutputFile::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TaskResult_OutputFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskResult_OutputFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskResult_OutputFile_descriptor_;
}

const TaskResult_OutputFile& TaskResult_OutputFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TaskResult_OutputFile* TaskResult_OutputFile::default_instance_ = NULL;

TaskResult_OutputFile* TaskResult_OutputFile::New() const {
  return new TaskResult_OutputFile;
}

void TaskResult_OutputFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskResult_OutputFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskResult_OutputFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskResult_OutputFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskResult_OutputFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskResult_OutputFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskResult_OutputFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskResult_OutputFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskResult_OutputFile::MergeFrom(const TaskResult_OutputFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskResult_OutputFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskResult_OutputFile::CopyFrom(const TaskResult_OutputFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResult_OutputFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskResult_OutputFile::Swap(TaskResult_OutputFile* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskResult_OutputFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskResult_OutputFile_descriptor_;
  metadata.reflection = TaskResult_OutputFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TaskResult::kExitCodeFieldNumber;
const int TaskResult::kTaskDurationFieldNumber;
const int TaskResult::kCommandDurationFieldNumber;
const int TaskResult::kWorkingDataSizeFieldNumber;
const int TaskResult::kOutputFileFieldNumber;
#endif  // !_MSC_VER

TaskResult::TaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskResult::InitAsDefaultInstance() {
}

TaskResult::TaskResult(const TaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskResult::SharedCtor() {
  _cached_size_ = 0;
  exitcode_ = 0;
  taskduration_ = GOOGLE_LONGLONG(0);
  workingdatasize_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskResult::~TaskResult() {
  SharedDtor();
}

void TaskResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskResult_descriptor_;
}

const TaskResult& TaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

TaskResult* TaskResult::default_instance_ = NULL;

TaskResult* TaskResult::New() const {
  return new TaskResult;
}

void TaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exitcode_ = 0;
    taskduration_ = GOOGLE_LONGLONG(0);
    workingdatasize_ = GOOGLE_LONGLONG(0);
  }
  commandduration_.Clear();
  outputfile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exitCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exitcode_)));
          set_has_exitcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskDuration;
        break;
      }

      // required int64 taskDuration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskduration_)));
          set_has_taskduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commandDuration;
        break;
      }

      // repeated int64 commandDuration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commandDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_commandduration())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_commandduration())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commandDuration;
        if (input->ExpectTag(32)) goto parse_workingDataSize;
        break;
      }

      // required int64 workingDataSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_workingDataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &workingdatasize_)));
          set_has_workingdatasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_outputFile;
        break;
      }

      // repeated .messages.TaskResult.OutputFile outputFile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_outputFile;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exitCode = 1;
  if (has_exitcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exitcode(), output);
  }

  // required int64 taskDuration = 2;
  if (has_taskduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->taskduration(), output);
  }

  // repeated int64 commandDuration = 3;
  for (int i = 0; i < this->commandduration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->commandduration(i), output);
  }

  // required int64 workingDataSize = 4;
  if (has_workingdatasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->workingdatasize(), output);
  }

  // repeated .messages.TaskResult.OutputFile outputFile = 5;
  for (int i = 0; i < this->outputfile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->outputfile(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exitCode = 1;
  if (has_exitcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exitcode(), target);
  }

  // required int64 taskDuration = 2;
  if (has_taskduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->taskduration(), target);
  }

  // repeated int64 commandDuration = 3;
  for (int i = 0; i < this->commandduration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->commandduration(i), target);
  }

  // required int64 workingDataSize = 4;
  if (has_workingdatasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->workingdatasize(), target);
  }

  // repeated .messages.TaskResult.OutputFile outputFile = 5;
  for (int i = 0; i < this->outputfile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->outputfile(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exitCode = 1;
    if (has_exitcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exitcode());
    }

    // required int64 taskDuration = 2;
    if (has_taskduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskduration());
    }

    // required int64 workingDataSize = 4;
    if (has_workingdatasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->workingdatasize());
    }

  }
  // repeated int64 commandDuration = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->commandduration_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->commandduration(i));
    }
    total_size += 1 * this->commandduration_size() + data_size;
  }

  // repeated .messages.TaskResult.OutputFile outputFile = 5;
  total_size += 1 * this->outputfile_size();
  for (int i = 0; i < this->outputfile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputfile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskResult::MergeFrom(const TaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  commandduration_.MergeFrom(from.commandduration_);
  outputfile_.MergeFrom(from.outputfile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exitcode()) {
      set_exitcode(from.exitcode());
    }
    if (from.has_taskduration()) {
      set_taskduration(from.taskduration());
    }
    if (from.has_workingdatasize()) {
      set_workingdatasize(from.workingdatasize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskResult::CopyFrom(const TaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < outputfile_size(); i++) {
    if (!this->outputfile(i).IsInitialized()) return false;
  }
  return true;
}

void TaskResult::Swap(TaskResult* other) {
  if (other != this) {
    std::swap(exitcode_, other->exitcode_);
    std::swap(taskduration_, other->taskduration_);
    commandduration_.Swap(&other->commandduration_);
    std::swap(workingdatasize_, other->workingdatasize_);
    outputfile_.Swap(&other->outputfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskResult_descriptor_;
  metadata.reflection = TaskResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

// @@protoc_insertion_point(global_scope)
